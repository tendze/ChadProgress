// Code generated by MockGen. DO NOT EDIT.
// Source: authorization.go

// Package authorization is a generated GoMock package.
package authorization

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserAuthService is a mock of UserAuthService interface.
type MockUserAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockUserAuthServiceMockRecorder
}

// MockUserAuthServiceMockRecorder is the mock recorder for MockUserAuthService.
type MockUserAuthServiceMockRecorder struct {
	mock *MockUserAuthService
}

// NewMockUserAuthService creates a new mock instance.
func NewMockUserAuthService(ctrl *gomock.Controller) *MockUserAuthService {
	mock := &MockUserAuthService{ctrl: ctrl}
	mock.recorder = &MockUserAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAuthService) EXPECT() *MockUserAuthServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserAuthService) Login(email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserAuthServiceMockRecorder) Login(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserAuthService)(nil).Login), email, password)
}

// RegisterUser mocks base method.
func (m *MockUserAuthService) RegisterUser(email, password, name, role string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", email, password, name, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserAuthServiceMockRecorder) RegisterUser(email, password, name, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserAuthService)(nil).RegisterUser), email, password, name, role)
}
