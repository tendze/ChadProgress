// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package userhandler is a generated GoMock package.
package userhandler

import (
	models "ChadProgress/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// AddMetrics mocks base method.
func (m *MockUserService) AddMetrics(clientEmail string, height, weight, bodyFat, bmi float64, measuredAt models.CustomTime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMetrics", clientEmail, height, weight, bodyFat, bmi, measuredAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMetrics indicates an expected call of AddMetrics.
func (mr *MockUserServiceMockRecorder) AddMetrics(clientEmail, height, weight, bodyFat, bmi, measuredAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMetrics", reflect.TypeOf((*MockUserService)(nil).AddMetrics), clientEmail, height, weight, bodyFat, bmi, measuredAt)
}

// AddProgressReport mocks base method.
func (m *MockUserService) AddProgressReport(trainerEmail, comments string, clientID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProgressReport", trainerEmail, comments, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProgressReport indicates an expected call of AddProgressReport.
func (mr *MockUserServiceMockRecorder) AddProgressReport(trainerEmail, comments, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProgressReport", reflect.TypeOf((*MockUserService)(nil).AddProgressReport), trainerEmail, comments, clientID)
}

// CreateClient mocks base method.
func (m *MockUserService) CreateClient(userEmail string, height, weight, bodyFat float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", userEmail, height, weight, bodyFat)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockUserServiceMockRecorder) CreateClient(userEmail, height, weight, bodyFat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockUserService)(nil).CreateClient), userEmail, height, weight, bodyFat)
}

// CreatePlan mocks base method.
func (m *MockUserService) CreatePlan(trainerEmail string, clientID uint, description, schedule string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlan", trainerEmail, clientID, description, schedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePlan indicates an expected call of CreatePlan.
func (mr *MockUserServiceMockRecorder) CreatePlan(trainerEmail, clientID, description, schedule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlan", reflect.TypeOf((*MockUserService)(nil).CreatePlan), trainerEmail, clientID, description, schedule)
}

// CreateTrainer mocks base method.
func (m *MockUserService) CreateTrainer(userEmail, qualification, experience, achievement string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrainer", userEmail, qualification, experience, achievement)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTrainer indicates an expected call of CreateTrainer.
func (mr *MockUserServiceMockRecorder) CreateTrainer(userEmail, qualification, experience, achievement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrainer", reflect.TypeOf((*MockUserService)(nil).CreateTrainer), userEmail, qualification, experience, achievement)
}

// GetClientProfile mocks base method.
func (m *MockUserService) GetClientProfile(userEmail string) (*models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientProfile", userEmail)
	ret0, _ := ret[0].(*models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientProfile indicates an expected call of GetClientProfile.
func (mr *MockUserServiceMockRecorder) GetClientProfile(userEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientProfile", reflect.TypeOf((*MockUserService)(nil).GetClientProfile), userEmail)
}

// GetMetrics mocks base method.
func (m *MockUserService) GetMetrics(clientEmail string) ([]models.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", clientEmail)
	ret0, _ := ret[0].([]models.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockUserServiceMockRecorder) GetMetrics(clientEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockUserService)(nil).GetMetrics), clientEmail)
}

// GetPlan mocks base method.
func (m *MockUserService) GetPlan(userEmail string, trainerID, clientID uint) ([]models.TrainingPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlan", userEmail, trainerID, clientID)
	ret0, _ := ret[0].([]models.TrainingPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlan indicates an expected call of GetPlan.
func (mr *MockUserServiceMockRecorder) GetPlan(userEmail, trainerID, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlan", reflect.TypeOf((*MockUserService)(nil).GetPlan), userEmail, trainerID, clientID)
}

// GetProgressReport mocks base method.
func (m *MockUserService) GetProgressReport(userEmail string, trainerID, clientID uint) ([]models.ProgressReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgressReport", userEmail, trainerID, clientID)
	ret0, _ := ret[0].([]models.ProgressReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgressReport indicates an expected call of GetProgressReport.
func (mr *MockUserServiceMockRecorder) GetProgressReport(userEmail, trainerID, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgressReport", reflect.TypeOf((*MockUserService)(nil).GetProgressReport), userEmail, trainerID, clientID)
}

// GetTrainerProfile mocks base method.
func (m *MockUserService) GetTrainerProfile(userEmail string) (*models.Trainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrainerProfile", userEmail)
	ret0, _ := ret[0].(*models.Trainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrainerProfile indicates an expected call of GetTrainerProfile.
func (mr *MockUserServiceMockRecorder) GetTrainerProfile(userEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrainerProfile", reflect.TypeOf((*MockUserService)(nil).GetTrainerProfile), userEmail)
}

// GetTrainersClients mocks base method.
func (m *MockUserService) GetTrainersClients(userEmail string) ([]models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrainersClients", userEmail)
	ret0, _ := ret[0].([]models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrainersClients indicates an expected call of GetTrainersClients.
func (mr *MockUserServiceMockRecorder) GetTrainersClients(userEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrainersClients", reflect.TypeOf((*MockUserService)(nil).GetTrainersClients), userEmail)
}

// SelectTrainer mocks base method.
func (m *MockUserService) SelectTrainer(userEmail string, trainerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTrainer", userEmail, trainerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectTrainer indicates an expected call of SelectTrainer.
func (mr *MockUserServiceMockRecorder) SelectTrainer(userEmail, trainerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTrainer", reflect.TypeOf((*MockUserService)(nil).SelectTrainer), userEmail, trainerID)
}
